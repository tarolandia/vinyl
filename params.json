{"body":"# Vinyl\r\n**_Access Level for him and her_**\r\n\r\n_by: Federico Saravia Barrantes [@fsaravia](https://github.com/fsaravia) and Lautaro Orazi [@tarolandia](https://github.com/tarolandia)_\r\n\r\n## Introduction\r\n\r\n\"Vinyl\" is a simple gem that allows developer to define different access levels for a resource and a serie of local and global validators to gain access to those levels.\r\nIt works by analizing a series of validators defined by you and returning a number representing the access level a particular request is able to reach.\r\n\r\n## What is it useful for?\r\n\r\nThis gem is useful when you need to control the output depending on who wants to access to a resource.\r\n\r\nFor example: user A wants to get user B's profile\r\n\r\n* If A ==  B, A have full access to data\r\n* If A is friend of B, A can see private data but not config data\r\n* If A is not friend of B, A only can see public data7\r\n\r\nIn the example we have 3 different levels of access to B information.\r\n\r\n## Basic Config\r\n\r\n```ruby\r\n  Vinyl::configure do |config|\r\n    config.api_acl_mode = Vinyl::Configuration::STRATEGY_DESCENDING\r\n    config.force_access_control = true \r\n    config.warn_on_missing_validators = true \r\n  end\r\n```\r\n\r\n__:api_acl_mode can take two values:__\r\n\r\n  1. Vinyl::Configuration::STRATEGY_DESCENDING, Check for validators starting on the highest access level\r\n  2. Vinyl::Configuration::STRATEGY_ASCENDING, Check for validators starting on the lowest access level\r\n\r\n__:force_access_control true/false__\r\n\r\nDeny access if no validators are given for a route/method combination and no global validators exist\r\n\r\n__:warn_on_missing_validators true/false__\r\n\r\nDisplay a warning on STDOUT when calling a missing validator\r\n\r\n\r\n## Defining Rules\r\n\r\nA rule defines the access level and the validators for a route/method combination:\r\n\r\n```ruby\r\nVinyl.when_route \r\n  '/api/route', \r\n  :with_method => 'POST|GET|PUT|DELETE',\r\n  :get_access_level => 1...n,\r\n  :if_pass => ['validator1', 'validator2', â€¦, 'validatorn']\r\n```\r\n\r\n__Example:__\r\n```ruby\r\nVinyl.when_route '/profiles.json', \r\n  :with_method => 'GET', \r\n  :get_access_level => 1, \r\n  :if_pass => ['is_user']\r\n\r\nVinyl.when_route '/profiles.json', \r\n  :with_method => 'GET', \r\n  :get_access_level => 2, \r\n  :if_pass => ['is_admin']\r\n```\r\n\r\n\r\n## Defining validators\r\n\r\nThere are two kind of validators: global and normal validators. All validators you define must return true or false.\r\n\r\nGlobal validators will be applied to all rules defined. You can add a global validator using add_global_validator method:\r\n\r\n```ruby\r\nVinyl.add_global_validator(\"name_of_global_validator\", lambda {\r\n  # your code here\r\n  return true/false\r\n})\r\n```\r\n\r\nNormal validators will be applied when a rule includes it into its validators list. Validators can be added using add_validator method:\r\n\r\n```ruby\r\nVinyl.add_validator(\"name_of_validator\", lambda {\r\n  # your code here\r\n  return true/false\r\n})\r\n```\r\n\r\n\r\n## Defining Variables\r\n\r\nInside validators you can use your models, classes and whatever. If you want a custom variable to be available in the scope of the validators, add it this way:\r\n\r\n```ruby\r\nVinyl.my_variable = variable_value\r\n```\r\n\r\nInside your validator:\r\n\r\n```ruby\r\nVinyl.add_validator(\"my_validator\", lambda {\r\n  puts my_variable # will output variable_value\r\n  return true/false\r\n})\r\n```\r\n\r\n__Clearing Variables__\r\n\r\nIf you need to reset previously defined variables to avoid validation errors just call:\r\n\r\n```ruby\r\nVinyl.reset_variables\r\n```\r\n## Getting Access Level\r\n\r\nAt this point you had defined your rules, validators and variables. Now you are ready to get call access level.\r\n\r\n```ruby\r\naccess_level = Vinyl.check_level('/call/route','call_method')\r\n```\r\n\r\nIf you need to avoid a global validator you can use bypass method:\r\n\r\n```ruby\r\naccess_level = Vinyl.bypass(\"global_validator_name\").check_level('/call/route','call_method')\r\n```\r\n\r\nor a list of them\r\n\r\n```ruby\r\naccess_level = Vinyl.bypass([\"global_1\",\"global_2\"]).check_level('/call/route','call_method')\r\n```\r\n\r\nUsing bypass means exclude the validators only for the current check.\r\n","name":"Vinyl","tagline":"Custom access level for resources","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}